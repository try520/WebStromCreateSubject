/**
 * Created with CodeModel.
 * User: 田林
 * Date: 2013-09-20
 * Time: 12:16:13
 * To change this template use File | Settings | File Templates.
 */
var client = require ( '../MySql' );
var Tools = require ( '../Tools' );
var EventEmitter = require ( 'events' ).EventEmitter;
var event = new EventEmitter ();

/*-----获取记录数--------------*/
var GetRsCount=function(Filter,CallBack){
    var Sql = "Select Count(*) as Count From S_User Where " + Filter + "";
    client.Query ( Sql , function ( err , Result ) {
        CallBack ( err , Result[0].Count );
    } )
}

var GetRsCount_Parms=function(Filter,Values ,CallBack){
    var Sql = "Select Count(*) as Count From S_User Where "+Filter+"";
    client.Query ( Sql ,Values, function ( err , Result ) {
        CallBack ( err , Result[0].Count );
    } )
}

/**
 * 功能:获取记录数
 *   重载方法说明：
 *   参数化查询
 *   function(String 查询条件,Object 参数化查询时的参数值的集合({key1:value1,key2:value2}) ,回调函数Function（err,Result）)
 *   非参数化查询
 *   function(String 查询条件,回调函数Function（err,Result）)
 * @constructor
 */
exports.GetRsCount = function () {
    if ( Tools.CheckArgs ( [String , Function] , arguments ) ) {
        GetRsCount ( arguments[0] ,arguments[1]);
        return;
    }
    if ( Tools.CheckArgs ( [String ,Object, Function] , arguments ) ) {
        GetRsCount_Parms ( arguments[0] , arguments[1],arguments[2] );
        return;
    }

    var CallBack= arguments[arguments.length-1];
    console.log("Access/S_User.js=>GetRsCount 缺少参数");
    CallBack(false,null);
}
/*-----统计求和--------------*/
var Sum=function(Field,Filter,CallBack){
    var Sql = "Select Sum("+Field+") as SumCount From S_User Where "+Filter+"";
    client.Query ( Sql , function ( err , Result ) {
        CallBack ( err , Result[0].SumCount );
    } )
}

var Sum_Parms=function(Field,Filter,Values ,CallBack){
    var Sql = "Select Sum("+Field+") as SumCount From S_User Where "+Filter+"";
    client.Query ( Sql ,Values, function ( err , Result ) {
        CallBack ( err , Result[0].SumCount );
    } )
}

/**
 * 功能：统计字段数值
 * 重载方法说明：
 * 参数化查询
 *   function(String 要统计的字段(字段名称),String 查询条件,Object 参数化查询时的参数值的集合({key1:value1,key2:value2}) ,回调函数Function（err,Result）)
 *    非参数化查询
 *   function(String 要统计的字段(字段名称),String 查询条件,回调函数Function（err,Result）)
 * @constructor
 */
exports.Sum = function () {
    if ( Tools.CheckArgs ( [String,String , Function] , arguments ) ) {
        Sum ( arguments[0] ,arguments[1],arguments[2]);
        return;
    }
    if ( Tools.CheckArgs ( [String, String ,Object, Function] , arguments ) ) {
        Sum_Parms ( arguments[0] , arguments[1],arguments[2],arguments[3] );
        return;
    }

    var CallBack= arguments[arguments.length-1];
    console.log("Access/S_User.js=>Sum 缺少参数");
    CallBack(false,null);
}

/*-----查询所有记录--------------*/
var SelectAll = function ( CallBack ) {
    var Sql = "Select * From S_User";
    client.Query ( Sql , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

var SelectAll_Field = function (Field, CallBack ) {
    var Sql = "Select "+Field+" From S_User";
    client.Query ( Sql , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}


var SelectAllByOrder = function (Field ,  Order , CallBack ) {
    var Sql = "Select "+Field+" From S_User  Order By " + Order;
    client.Query ( Sql , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

/**
 * 功能: 查询所有记录
 *   重载方法说明：
 *   获取所有记录
 *   function(回调函数Function（err,Result）)
 *   获取所有记录 - 指定要返回的字段
 *   function(String 要返回的字段（Field1，Field2） ，回调函数Function（err,Result）)
 *   获取所有记录 - 排序
 *   function(String 要返回的字段（Field1，Field2） , String 排序表达式（Filed Desc），回调函数Function（err,Result）)
 * @constructor
 */
exports.SelectAll = function () {
    if ( Tools.CheckArgs ( [Function] , arguments ) ) {
        SelectAll ( arguments[0] );
        return;
    }
    if ( Tools.CheckArgs ( [String, Function] , arguments ) ) {
        SelectAll_Field ( arguments[0] , arguments[1] );
        return;
    }
    if ( Tools.CheckArgs ( [String,String, Function] , arguments ) ) {
        SelectAllByOrder ( arguments[0] , arguments[1],arguments[2] );
        return;
    }
    var CallBack= arguments[arguments.length-1];
    console.log("Access/S_User.js=>SelectAll 缺少参数");
    CallBack(false,null);
}
/*-----根据关键字查询记录--------------*/

var Select = function ( UserID , CallBack ) {
    var Sql = "Select * From S_User Where UserID=?UserID";
    var Values = {};
    Values.UserID = UserID;
    client.Query ( Sql , Values , function ( err , Result ) {
        if ( Result.length > 0 ) {
            CallBack ( err , Result[0] );
        } else {
            CallBack ( err , null );
        }
    } )
}

    var Select_Field = function (Field, UserID , CallBack ) {
    var Sql = "Select "+Field+" From S_User Where UserID=?UserID";
    var Values = {};
    Values.UserID = UserID;
    client.Query ( Sql , Values , function ( err , Result ) {
        if ( Result.length > 0 ) {
            CallBack ( err , Result[0] );
        } else {
            CallBack ( err , null );
        }
    } )
}

/**
 * 功能: 根据主键查询记录
 *   重载方法说明：
 *   返回所有字段  - 主键值为字符串
 *   function(String 主键值 ，回调函数Function（err,Result）)
 *   返回所有字段   - 主键值为数字
 *   function(Number 主键值 ，回调函数Function（err,Result）)
 *   返回指定的字段  - 主键值为字符串
 *   function(String 要返回的字段（Field1，Field2） ，String 主键值 ，回调函数Function（err,Result）)
 *   返回指定的字段 - 主键值为数字
 *   function(String 要返回的字段（Field1，Field2） ，Number 主键值 ，回调函数Function（err,Result）)
 * @constructor
 */
exports.Select = function () {

    if ( Tools.CheckArgs ( [String, Function] , arguments ) ) {
        Select ( arguments[0] , arguments[1] );
        return;
    }
    if ( Tools.CheckArgs ( [Number, Function] , arguments ) ) {
        Select ( arguments[0] , arguments[1] );
        return;
    }
    if ( Tools.CheckArgs ( [String,String, Function] , arguments ) ) {
        Select_Field ( arguments[0] , arguments[1],arguments[2] );
        return;
    }
    if ( Tools.CheckArgs ( [String,Number, Function] , arguments ) ) {
        Select_Field ( arguments[0] , arguments[1],arguments[2] );
        return;
    }
    var CallBack= arguments[arguments.length-1];
    console.log("Access/S_User.js=>Select 缺少参数");
    CallBack(false,null);
}

/*-----根据条件查询记录--------------*/
var SelectByFilter = function ( Filter , CallBack ) {
    var Sql = "Select * From S_User Where " + Filter + "";
    client.Query ( Sql , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

var SelectByFilter_Field = function (Field, Filter , CallBack ) {
    var Sql = "Select "+Field+" From S_User Where " + Filter + "";
    client.Query ( Sql , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

var SelectByFilter_Parms = function ( Filter , Values , CallBack ) {
    var Sql = "Select * From S_User Where " + Filter + "";
    client.Query ( Sql , Values , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

var SelectByFilter_Field_Parms = function (Field, Filter , Values , CallBack ) {
    var Sql = "Select "+Field+" From S_User Where " + Filter + "";
    client.Query ( Sql , Values , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}



/**
 * 功能: 根据条件查询记录
 *   重载方法说明：
 *   返回所有字段 - 非参数化查询
 *   function(String 查询条件 ，回调函数Function（err,Result）)
 *   返回指定字段 - 非参数化查询
 *   function(String 要返回的字段（Field1，Field2） ，String 查询条件 ，回调函数Function（err,Result）)
 *   返回所有字段  - 参数化查询
 *   function(String 查询条件 ， Object 参数化查询时的参数值的集合({key1:value1,key2:value2}) ， 回调函数Function（err,Result）)
 *   返回指定的字段 - 参数化查询
 *   function(String 要返回的字段（Field1，Field2） ，String 查询条件 ， Object 参数化查询时的参数值的集合({key1:value1,key2:value2})  ，回调函数Function（err,Result）)
 * @constructor
 */
exports.SelectByFilter = function () {
    if ( Tools.CheckArgs ( [String , Function] , arguments ) ) {
        SelectByFilter ( arguments[0] , arguments[1] );
        return;
    }
    if ( Tools.CheckArgs ( [String,String , Function] , arguments ) ) {
        SelectByFilter_Field ( arguments[0] , arguments[1],arguments[2] );
        return;
    }
    if ( Tools.CheckArgs ( [String, Object , Function] , arguments ) ) {
        SelectByFilter_Parms ( arguments[0] , arguments[1] , arguments[2] );
        return;
    }
    if ( Tools.CheckArgs ( [String,String, Object , Function] , arguments ) ) {
        SelectByFilter_Field_Parms ( arguments[0] , arguments[1] , arguments[2],arguments[3] );
        return;
    }
    var CallBack= arguments[arguments.length-1];
    console.log("Access/S_User.js=>SelectByFilter 缺少参数");
    CallBack(false,null);
}

/*-----插入--------------*/
/**
 * 插入记录
 * @param Model 实体 Type:Object, 实例：{key1:value1,key2:value2}
 * @param CallBack   回调函数Function（err,Result）
 * @constructor
 */
exports.Insert = function ( Model , CallBack ) {
    var Sql = "Insert Into S_User Set UserName=?UserName,UserRealName=?UserRealName,UserPwd=?UserPwd,UserMobilePhone=?UserMobilePhone,UserLevel=?UserLevel,UserLabel=?UserLabel,UserArea=?UserArea,UserLoginIp=?UserLoginIp,UserPingYin=?UserPingYin,UserCreatetime=?UserCreatetime,UserLoginTime=?UserLoginTime,UserRole=?UserRole ";
    client.Query ( Sql , Model , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

/**
 * 插入记录
 * @param ModelList 实体集合 ，Type:Object, 实例：[{key1:value1,key2:value2},{key1:value1,key2:value2}]
 * @param CallBack   回调函数Function（err,Result）
 * @constructor
 */
exports.InsertList = function ( ModelList , CallBack ) {
    var Sql = "Insert Into S_User Set UserName=?UserName,UserRealName=?UserRealName,UserPwd=?UserPwd,UserMobilePhone=?UserMobilePhone,UserLevel=?UserLevel,UserLabel=?UserLabel,UserArea=?UserArea,UserLoginIp=?UserLoginIp,UserPingYin=?UserPingYin,UserCreatetime=?UserCreatetime,UserLoginTime=?UserLoginTime,UserRole=?UserRole";
    client.GetConnection ( function ( err , connection ) {
        if ( err ) {
            CallBack ( err , null );
            return;
        }
        for ( var i = 0 ; i < ModelList.length ; i ++ ) {
            var Model = ModelList[0];
            client.Query ( connection , Sql , Model , function ( err ) {
                if ( err ) {
                    event.emit ( 'InsertFail' );
                    return;
                }
                if ( i == ModelList.length - 1 ) {
                    event.emit ( 'InsertSuccess' );
                }
            } )
        }
        event.on ( 'InsertSuccess' , function () {
            connection.release ();
            CallBack ( true , null );
        } )
        event.on ( 'InsertFail' , function () {
            connection.release ();
            CallBack ( false , null );
        } )
    } )


}

/*-----更新--------------*/
/**
 * 更新记录
 * @param Model   实体 Type:Object, 实例：{key1:value1,key2:value2}
 * @param CallBack   回调函数Function（err,Result）
 * @constructor
 */
exports.Update = function ( Model , CallBack ) {
    var Sql = "Update S_User Set  UserName=?UserName,UserRealName=?UserRealName,UserPwd=?UserPwd,UserMobilePhone=?UserMobilePhone,UserLevel=?UserLevel,UserLabel=?UserLabel,UserArea=?UserArea,UserLoginIp=?UserLoginIp,UserPingYin=?UserPingYin,UserCreatetime=?UserCreatetime,UserLoginTime=?UserLoginTime,UserRole=?UserRole Where UserID=?UserID";
    client.Query ( Sql , Model , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}



/**
 * 更新字段值 UserName
 * @param Key  主键值 Key:UserID
 * @param Value UserName的值
 * @param CallBack   回调函数Function（err,Result）
 * @constructor
 */
exports.Set_UserName = function ( UserID , Value , CallBack ) {
    var Sql = "Update S_User Set UserName=?UserName where UserID=?UserID";
    var Model = {};
    Model.Value = Value;
    Model.UserID = UserID;
    client.Query ( Sql , Model , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

/**
 * 更新字段值 UserRealName
 * @param Key  主键值 Key:UserID
 * @param Value UserRealName的值
 * @param CallBack   回调函数Function（err,Result）
 * @constructor
 */
exports.Set_UserRealName = function ( UserID , Value , CallBack ) {
    var Sql = "Update S_User Set UserRealName=?UserRealName where UserID=?UserID";
    var Model = {};
    Model.Value = Value;
    Model.UserID = UserID;
    client.Query ( Sql , Model , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

/**
 * 更新字段值 UserPwd
 * @param Key  主键值 Key:UserID
 * @param Value UserPwd的值
 * @param CallBack   回调函数Function（err,Result）
 * @constructor
 */
exports.Set_UserPwd = function ( UserID , Value , CallBack ) {
    var Sql = "Update S_User Set UserPwd=?UserPwd where UserID=?UserID";
    var Model = {};
    Model.Value = Value;
    Model.UserID = UserID;
    client.Query ( Sql , Model , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

/**
 * 更新字段值 UserMobilePhone
 * @param Key  主键值 Key:UserID
 * @param Value UserMobilePhone的值
 * @param CallBack   回调函数Function（err,Result）
 * @constructor
 */
exports.Set_UserMobilePhone = function ( UserID , Value , CallBack ) {
    var Sql = "Update S_User Set UserMobilePhone=?UserMobilePhone where UserID=?UserID";
    var Model = {};
    Model.Value = Value;
    Model.UserID = UserID;
    client.Query ( Sql , Model , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

/**
 * 更新字段值 UserLevel
 * @param Key  主键值 Key:UserID
 * @param Value UserLevel的值
 * @param CallBack   回调函数Function（err,Result）
 * @constructor
 */
exports.Set_UserLevel = function ( UserID , Value , CallBack ) {
    var Sql = "Update S_User Set UserLevel=?UserLevel where UserID=?UserID";
    var Model = {};
    Model.Value = Value;
    Model.UserID = UserID;
    client.Query ( Sql , Model , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

/**
 * 更新字段值 UserLabel
 * @param Key  主键值 Key:UserID
 * @param Value UserLabel的值
 * @param CallBack   回调函数Function（err,Result）
 * @constructor
 */
exports.Set_UserLabel = function ( UserID , Value , CallBack ) {
    var Sql = "Update S_User Set UserLabel=?UserLabel where UserID=?UserID";
    var Model = {};
    Model.Value = Value;
    Model.UserID = UserID;
    client.Query ( Sql , Model , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

/**
 * 更新字段值 UserArea
 * @param Key  主键值 Key:UserID
 * @param Value UserArea的值
 * @param CallBack   回调函数Function（err,Result）
 * @constructor
 */
exports.Set_UserArea = function ( UserID , Value , CallBack ) {
    var Sql = "Update S_User Set UserArea=?UserArea where UserID=?UserID";
    var Model = {};
    Model.Value = Value;
    Model.UserID = UserID;
    client.Query ( Sql , Model , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

/**
 * 更新字段值 UserLoginIp
 * @param Key  主键值 Key:UserID
 * @param Value UserLoginIp的值
 * @param CallBack   回调函数Function（err,Result）
 * @constructor
 */
exports.Set_UserLoginIp = function ( UserID , Value , CallBack ) {
    var Sql = "Update S_User Set UserLoginIp=?UserLoginIp where UserID=?UserID";
    var Model = {};
    Model.Value = Value;
    Model.UserID = UserID;
    client.Query ( Sql , Model , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

/**
 * 更新字段值 UserPingYin
 * @param Key  主键值 Key:UserID
 * @param Value UserPingYin的值
 * @param CallBack   回调函数Function（err,Result）
 * @constructor
 */
exports.Set_UserPingYin = function ( UserID , Value , CallBack ) {
    var Sql = "Update S_User Set UserPingYin=?UserPingYin where UserID=?UserID";
    var Model = {};
    Model.Value = Value;
    Model.UserID = UserID;
    client.Query ( Sql , Model , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

/**
 * 更新字段值 UserCreatetime
 * @param Key  主键值 Key:UserID
 * @param Value UserCreatetime的值
 * @param CallBack   回调函数Function（err,Result）
 * @constructor
 */
exports.Set_UserCreatetime = function ( UserID , Value , CallBack ) {
    var Sql = "Update S_User Set UserCreatetime=?UserCreatetime where UserID=?UserID";
    var Model = {};
    Model.Value = Value;
    Model.UserID = UserID;
    client.Query ( Sql , Model , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

/**
 * 更新字段值 UserLoginTime
 * @param Key  主键值 Key:UserID
 * @param Value UserLoginTime的值
 * @param CallBack   回调函数Function（err,Result）
 * @constructor
 */
exports.Set_UserLoginTime = function ( UserID , Value , CallBack ) {
    var Sql = "Update S_User Set UserLoginTime=?UserLoginTime where UserID=?UserID";
    var Model = {};
    Model.Value = Value;
    Model.UserID = UserID;
    client.Query ( Sql , Model , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

/**
 * 更新字段值 UserRole
 * @param Key  主键值 Key:UserID
 * @param Value UserRole的值
 * @param CallBack   回调函数Function（err,Result）
 * @constructor
 */
exports.Set_UserRole = function ( UserID , Value , CallBack ) {
    var Sql = "Update S_User Set UserRole=?UserRole where UserID=?UserID";
    var Model = {};
    Model.Value = Value;
    Model.UserID = UserID;
    client.Query ( Sql , Model , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}


/*-----删除数据--------------*/
/**
 *  根据主键删除数据
 * @param Key     主键值
 * @param CallBack  回调函数Function（err,Result）
 * @constructor
 */
exports.Delete=function(UserID,CallBack){
    var Sql = "Delete From S_User Where UserID=?UserID";
    var Model={};
    Model.UserID=UserID;
    client.Query ( Sql , Model , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

/**
 *   删除所有数据
 * @param CallBack  回调函数Function（err,Result）
 * @constructor
 */
exports.DeleteAll=function(CallBack){
    var Sql = "Delete From S_User";
    client.Query ( Sql  , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

var DeleteByFilter=function(Filter,CallBack){
    var Sql = "Delete From S_User where "+Filter+"";
    client.Query ( Sql  , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

var DeleteByFilter_Parms=function(Filter,Values,CallBack){
    var Sql = "Delete From S_User where "+Filter+"";
    client.Query ( Sql  ,Values, function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

/**
 *    删除所有记录
 *    重载方法说明：
 *   根据条件删除 - 非参数化
 *   function(String 查询条件 ，回调函数Function（err,Result）)
 *   根据条件删除 - 参数化
 *   function(String 查询条件，String 查询条件 ， Object 参数化查询时的参数值的集合({key1:value1,key2:value2})  ，回调函数Function（err,Result）)
 * @constructor
 */
exports. DeleteByFilter=function(){
    if ( Tools.CheckArgs ( [String, Function] , arguments ) ) {
        DeleteByFilter ( arguments[0] , arguments[1] );
        return;
    }
    if ( Tools.CheckArgs ( [String,Object, Function] , arguments ) ) {
        DeleteByFilter_Parms ( arguments[0] , arguments[1],arguments[2] );
        return;
    }
    var CallBack= arguments[arguments.length-1];
    console.log("Access/S_User.js=>DeleteByFilter 缺少参数");
    CallBack(false,null);
}


/*-----获取分页数据--------------*/
var GetPageRow = function ( CurPage , PageSize , Filter , CallBack ) {
    if(Filter=="")  Filter="1=1";
    var Sql = "Select *  from S_User  where " + Filter + "  limit " + (PageSize * (CurPage - 1)) + "," + PageSize + "";
    client.Query ( Sql , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

var GetPageRow_Field = function ( Field , CurPage , PageSize , Filter , CallBack ) {
    if(Filter=="")  Filter="1=1";
    var Sql = "Select " + Field + "  from S_User  where " + Filter + "  limit " + (PageSize * (CurPage - 1)) + "," + PageSize + "";
    client.Query ( Sql , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

var GetPageRow_Parms = function ( CurPage , PageSize , Filter , Values , CallBack ) {
    if(Filter=="")  Filter="1=1";
    var Sql = "Select *  from S_User  where " + Filter + "  limit " + (PageSize * (CurPage - 1)) + "," + PageSize + "";
    client.Query ( Sql , Values , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}

var GetPageRow_Field_Parms = function ( Field , CurPage , PageSize , Filter , Values , CallBack ) {
    if(Filter=="")  Filter="1=1";
    var Sql = "Select " + Field + "  from S_User  where " + Filter + "  limit " + (PageSize * (CurPage - 1)) + "," + PageSize + "";
    client.Query ( Sql , Values , function ( err , Result ) {
        CallBack ( err , Result );
    } )
}


/**
 *    获取分页数据
 *    重载方法说明：
 *   获取所有字段
 *   function(Number 当前页 ，Number 分页尺寸 , String  查询条件 ， 回调函数Function（err,Result）)
 *   获取指定字段
 *   function(String 要查询的字段（Filed1,Filed2）, Number 当前页 ，Number 分页尺寸 , String  查询条件 ， 回调函数Function（err,Result）)
 *    获取所有字段  - 参数化查询
 *   function(Number 当前页 ，Number 分页尺寸 , String  查询条件 ，Object 参数化查询时的参数值的集合({key1:value1,key2:value2})  ， 回调函数Function（err,Result）)
 *   获取指定字段 - 参数化查询
 *   function(String 要查询的字段（Filed1,Filed2）,  Number 当前页 ，Number 分页尺寸 , String 查询条件 ， Object 参数化查询时的参数值的集合({key1:value1,key2:value2})  ，回调函数Function（err,Result）)
 * @constructor
 */
exports.GetPageRow=function(){
    if ( Tools.CheckArgs ( [Number , Number , String , Function] , arguments ) ) {
        GetPageRow ( arguments[0] , arguments[1],arguments[2],arguments[3] );
        return;
    }
    if ( Tools.CheckArgs ( [String , Number , Number , String , Function] , arguments ) ) {
        GetPageRow_Field ( arguments[0] , arguments[1],arguments[2],arguments[3],arguments[4] );
        return;
    }
    if ( Tools.CheckArgs ( [ Number , Number , String ,Object, Function] , arguments ) ) {
        GetPageRow_Parms ( arguments[0] , arguments[1],arguments[2],arguments[3],arguments[4] );
        return;
    }
    if ( Tools.CheckArgs ( [String , Number , Number , String ,Object, Function] , arguments ) ) {
        GetPageRow_Field_Parms ( arguments[0] , arguments[1],arguments[2],arguments[3],arguments[4],arguments[5] );
        return;
    }
    var CallBack= arguments[arguments.length-1];
    console.log("Access/S_User.js=>GetPageRow 缺少参数");
    CallBack(false,null);
}

